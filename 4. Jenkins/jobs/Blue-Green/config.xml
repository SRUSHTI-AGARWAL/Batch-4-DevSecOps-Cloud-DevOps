<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>SWITCH_TRAFFIC</string>
        <string>DEPLOY_ENV</string>
        <string>DOCKER_TAG</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>2</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
        <removeLastBuild>false</removeLastBuild>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>DEPLOY_ENV</name>
          <description>Choose which environment to deploy: Blue or Green</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>blue</string>
              <string>green</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>DOCKER_TAG</name>
          <description>Choose the Docker image tag for the deployment</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>blue</string>
              <string>green</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>SWITCH_TRAFFIC</name>
          <description>Switch traffic between Blue and Green</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3969.vdc9d3a_efcc6a_">
    <script>pipeline {
  agent any

  tools {
    maven &apos;maven3&apos;
  }
  environment {
    SCANNER_HOME = tool &apos;sonar-scanner&apos;
    IMAGE_NAME = &quot;imsrushti/bankapp&quot;
    TAG = &quot;${params.DOCKER_TAG}&quot; // The image tag now comes from the parameter
    KUBE_NAMESPACE = &apos;webapps&apos;

  }

  parameters {
    choice(name: &apos;DEPLOY_ENV&apos;, choices: [&apos;blue&apos;, &apos;green&apos;], description: &apos;Choose which environment to deploy: Blue or Green&apos;)
    choice(name: &apos;DOCKER_TAG&apos;, choices: [&apos;blue&apos;, &apos;green&apos;], description: &apos;Choose the Docker image tag for the deployment&apos;)
    booleanParam(name: &apos;SWITCH_TRAFFIC&apos;, defaultValue: false, description: &apos;Switch traffic between Blue and Green&apos;)
  }

  stages {
      
    stage(&apos;Clean Workspace&apos;) {
      steps {
             cleanWs()
      }
    }  
      
      
    stage(&apos;Git Checkout&apos;) {
      steps {
        git branch: &apos;main&apos;, credentialsId: &apos;github-cred&apos;, url: &apos;https://github.com/SRUSHTI-AGARWAL/Blue-Green-Deployment.git&apos;
      }
    }

    stage(&apos;Code Compile&apos;) {
      steps {
        sh &apos;mvn compile&apos;
      }
    }

    stage(&apos;Unit Tests&apos;) {
      steps {
        sh &apos;mvn test -DskipTests=true&apos;
      }
    }

    stage(&apos;Trivy FS Scan&apos;) {
      steps {
        sh &quot;trivy fs --format table -o fsbg.html .&quot;
      }
    }

    stage(&apos;Sonarqube:Code Quality Check&apos;) {
      steps {
        withSonarQubeEnv(&apos;sonar-server&apos;) {
          sh &apos;$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Anything -Dsonar.projectKey=Anything -Dsonar.java.binaries=target&apos;
        }
      }
    }

    stage(&quot;Quality Gate Check&quot;) {
      steps {
        timeout(time: 1, unit: &apos;HOURS&apos;) {
          waitForQualityGate abortPipeline: false
        }

      }

    }

    stage(&apos;Build Package&apos;) {
      steps {
        sh &apos;mvn package -DskipTests=true&apos;
      }
    }

    stage(&apos;Publish Artifacts to Nexus&apos;) {
      steps {
        withMaven(globalMavenSettingsConfig: &apos;maven-settings-srushti&apos;, jdk: &apos;&apos;, maven: &apos;maven3&apos;, mavenSettingsConfig: &apos;&apos;, traceability: true) {
          sh &apos;mvn deploy -DskipTests=true&apos;
        }
      }
    }

    stage(&apos;Docker Build &amp; Tag Image&apos;) {
      steps {
        script {
          withDockerRegistry(credentialsId: &apos;docker-cred&apos;) {
            sh &apos;docker build -t ${IMAGE_NAME}:${TAG} .&apos;
          }
        }
      }
    }

    stage(&apos;Trivy image Scan&apos;) {
      steps {
        sh &apos;trivy image --format table -o fsbg.html ${IMAGE_NAME}:${TAG}&apos;
      }
    }

    stage(&apos;Docker Push Image&apos;) {
      steps {

        script {
          withDockerRegistry(credentialsId: &apos;docker-cred&apos;) {
            sh &apos;docker push ${IMAGE_NAME}:${TAG}&apos;
          }
        }

      }
    }
    stage(&quot;Deploy MySQL Service and Deployment&quot;)
    { 
        steps{
            script{
                withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;eks-st&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-token&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;http://127.0.0.1:32771&apos;) {
    sh &apos;kubectl apply -f mysql-dbs.yaml -n ${KUBE_NAMESPACE}&apos;
                }
            }
            
    }
        
    }
    
    stage(&apos;Deploy App-Service&apos;)
    { steps{
            script{
                withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;eks-st&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-token&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;http://127.0.0.1:32771&apos;)
                {
    sh &quot;&quot;&quot;
         if ! kubectl get svc bankapp-service -n ${KUBE_NAMESPACE}; then 
         kubectl apply -f bankapp-service.yaml -n ${KUBE_NAMESPACE}
         
         fi 
         &quot;&quot;&quot;}
        }   
        
    }}
    
    stage(&quot;Deploy Application&quot;)
    { steps{
        script {
            def deploymentFile= &quot;&quot;
            if ( params.DEPLOY_ENV == &quot;blue&quot;)
              {deploymentFile = &apos;bankapp-blue-deployment.yaml&apos;}
             else
             {deploymentFile = &apos;bankapp-green-deployment.yaml&apos;}
             withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;eks-st&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-token&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;http://127.0.0.1:32771&apos;)
                {
                    sh &quot;kubectl apply -f ${deploymentFile} -n ${KUBE_NAMESPACE}&quot;
                    }
             
        }
    } }
    stage(&quot;Switch traffic between Environments&quot;) {
    when {
        expression { return params.SWITCH_TRAFFIC }
    }
    steps {
        script {
            def newEnv = params.DEPLOY_ENV
            withKubeConfig(
                caCertificate: &apos;&apos;, 
                clusterName: &apos;eks-st&apos;, 
                contextName: &apos;&apos;, 
                credentialsId: &apos;k8-token&apos;, 
                namespace: &apos;webapps&apos;, 
                restrictKubeConfigAccess: false, 
                serverUrl: &apos;http://127.0.0.1:32771&apos;
            ) {
                sh &quot;&quot;&quot;
                    kubectl patch service bankapp-service -p &apos;{
                        &quot;spec&quot;: {
                            &quot;selector&quot;: {
                                &quot;app&quot;: &quot;bankapp&quot;,
                                &quot;version&quot;: &quot;${newEnv}&quot;
                            }
                        }
                    }&apos; -n ${KUBE_NAMESPACE}
                &quot;&quot;&quot;
            }
            echo &quot;Traffic has been switched to the ${newEnv} environment.&quot;
        }
    }
}

    
    stage(&apos;Verify Deployment&apos;) {
            steps {
                script {
                    def verifyEnv = params.DEPLOY_ENV
                    withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;devopsshack-cluster&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-token&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;http://127.0.0.1:32771&apos;) {
                        sh &quot;&quot;&quot;
                        kubectl get pods -l version=${verifyEnv} -n ${KUBE_NAMESPACE}
                        kubectl get svc bankapp-service -n ${KUBE_NAMESPACE}
                        &quot;&quot;&quot;
                    }
                }
            }
        }

  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>